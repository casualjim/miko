[package]
name = "miko"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
anyhow = { version = "1", optional = true }
async-trait = { version = "0.1", optional = true }
axum = { version = "0.7", optional = true, features = [
  "macros",
  "multipart",
  "form",
] }
axum_session_auth = { version = "0.12", features = [
  "postgres-rustls",
], optional = true }
axum_session = { version = "0.12", features = [
  "postgres-rustls",
], optional = true }
async-openai = { version = "0.18", default-features = false, features = [
  "rustls-webpki-roots",
], optional = true }

bytes = "1"

candle-core = "0.3"
cfg-if = "1"
chrono = { version = "0.4", features = ["serde"] }
console_error_panic_hook = "0.1"
console_log = "1"

derive_builder = "0.13.0"
dotenvy = { version = "0.15.7", optional = true, features = ["clap"] }

futures = "0.3"

gloo-net = { version = "0.5" }
gloo-storage = { version = "0.3" }
gloo-events = { version = "0.2" }

http = "1"

# gloo-events = { version = "0.2" }
# leptos = { version = "0.5", features = ["nightly", "rustls"] }
# leptos_axum = { version = "0.5", optional = true }
# leptos_meta = { version = "0.5", features = ["nightly"] }
# leptos_router = { version = "0.5", features = ["nightly"] }
leptos = { git = "https://github.com/leptos-rs/leptos", branch = "main", features = [
  "nightly",
  "rustls",
] }
leptos_axum = { git = "https://github.com/leptos-rs/leptos", branch = "main", optional = true }
leptos_meta = { git = "https://github.com/leptos-rs/leptos", branch = "main", features = [
  "nightly",
] }
leptos_router = { git = "https://github.com/leptos-rs/leptos", branch = "main", features = [
  "nightly",
] }
log = "0.4"

markdown = "1.0.0-alpha.16"
mime_guess = "2"

notify = { version = "6.1.1", optional = true }

oauth2 = { version = "4", optional = true }

phosphor-leptos = { path = "../../SorenHolstHansen/phosphor-leptos" }

reqwest = { version = "0.11", default-features = false, features = [
  "rustls-tls",
  "json",
  "stream",
], optional = true }

serde = { version = "1", features = ["derive"] }
serde_json = { version = "1" }
server_fn = { git = "https://github.com/leptos-rs/leptos", branch = "main", features = [
  "serde-lite",
  "multipart",
] }
struct-convert = { version = "1", optional = true }
sqlx = { version = "0.7.3", features = [
  "postgres",
  "macros",
  "chrono",
  "runtime-tokio-rustls",
  "json",
  "uuid",
], optional = true }

thiserror = "1.0.38"
tokio = { version = "1", optional = true }
tokio-util = { version = "0.7", features = ["io"], optional = true }
tokio-stream = { version = "0.1", optional = true }
tower = { version = "0.4", optional = true }
# tower-http = { version = "0.4", features = ["fs"], optional = true }
tower-http = { version = "0.5", features = [
  "fs",
  "tracing",
  "trace",
], optional = true }
# wasm-bindgen-futures = "0.4"
# wasm-streams = "0.4"
tracing = { version = "0.1", optional = true }
tracing-subscriber = { version = "0.3", features = [
  "json",
  "serde",
  "env-filter",
  "chrono",
], optional = true }
ttl_cache = { version = "0.5.1", optional = true }
typed-builder = "0.18"

uuid = { version = "1", features = ["wasm-bindgen", "serde", "v4"] }

wasm-bindgen = "0.2"
web-sys = { version = "0.3.67", features = [
  "AbortController",
  "AbortSignal",
  "Blob",
  "DragEvent",
  "DataTransfer",
  "File",
  "FileList",
  "FileReader",
  "Node",
] }

[features]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
  "dep:axum",
  "dep:tokio",
  "dep:tokio-util",
  "dep:tokio-stream",
  "dep:tower",
  "dep:tower-http",
  "dep:leptos_axum",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  "dep:tracing",
  "dep:tracing-subscriber",
  "dep:sqlx",
  "dep:dotenvy",
  "dep:axum_session_auth",
  "dep:axum_session",
  "dep:reqwest",
  "dep:async-trait",
  "dep:anyhow",
  "dep:struct-convert",
  "dep:oauth2",
  "dep:ttl_cache",
  "dep:async-openai",
  "dep:notify",
]
notify = ["dep:notify"]

[build-dependencies]
clap_mangen = "0.2"
# sqlx = { version = "0.7", features = [
#   "postgres",
#   "macros",
#   "chrono",
#   "runtime-tokio-rustls",
#   "json",
#   "uuid",
# ] }
clap = { version = "4", features = ["derive"] }

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "miko"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
# style-file = "style/mime-icons.css"

# Optional, Activates the tailwind build
tailwind-input-file = "style/tailwind.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
